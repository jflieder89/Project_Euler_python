"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over n divisors?
"""
from math import sqrt
#make a function to find the amount of all factors of a number:
def factor_count(n):
    count = 0
    for i in range(1, int(sqrt(n))): #go up from 1 to just below sqrt(n)
        if n % i == 0:
            count += 2 #since most factors come in pair
    if n % sqrt(n) == 0:
        count += 1 #sqrt does not come in a pair!
    return count
print(factor_count(28))

#now solve the prompted problem:
def divisibleTriangleNumber(n):
    dummy = 1
    triangle_count = 1 #set initial triangle number count
    while factor_count(triangle_count) < n:
        dummy += 1 #go to the next amount needed to add to get the next triangle number
        triangle_count += dummy #go to the next triangle number
        print(triangle_count)
    return triangle_count

print(divisibleTriangleNumber(500))
