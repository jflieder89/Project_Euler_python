"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over n divisors?
"""
from math import floor, sqrt
def num_factors(n):
    sum = 0
    for i in range(1, floor(sqrt(n)) + 1 ):
        if (n % i == 0):
            sum +=2
            if i**2 == n: #subtract one if it is a square root, in which chase there is no different factor pair for it
                sum -=1
    return sum

def divisibleTriangleNumber(n):
    count = 1
    triangle = 1
    while num_factors(triangle) < n:
        count += 1
        triangle += count
    return triangle

print(divisibleTriangleNumber(374))
